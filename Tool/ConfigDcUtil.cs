// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocBuilder/configDcUtil.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ECP.Util.ConfigDc.ProtoProxy {

  /// <summary>Holder for reflection information generated from protocBuilder/configDcUtil.proto</summary>
  public static partial class ConfigDcUtilReflection {

    #region Descriptor
    /// <summary>File descriptor for protocBuilder/configDcUtil.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigDcUtilReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBwcm90b2NCdWlsZGVyL2NvbmZpZ0RjVXRpbC5wcm90bxIcRUNQLlV0aWwu",
            "Q29uZmlnRGMuUHJvdG9Qcm94eSIqChRTZXJ2ZXJBZGRyZXNzUmVxdWVzdBIS",
            "CgpzZXJ2ZXJOYW1lGAEgASgJIlEKElNlcnZlckFkZHJlc3NSZXBseRIVCg1z",
            "ZXJ2ZXJBZGRyZXNzGAEgASgJEhAKCHNlcnZlcklwGAIgASgJEhIKCnNlcnZl",
            "clBvcnQYAyABKAUiIgoPRGJDb25maWdSZXF1ZXN0Eg8KB2tleU5hbWUYASAB",
            "KAkiJAoNRGJDb25maWdSZXBseRITCgtkYkNvbmZpZ1ZhbBgBIAEoCSI+ChJT",
            "ZXJ2aWNlRmluZFJlcXVlc3QSEwoLc2VydmljZU5hbWUYASABKAkSEwoLc2Vy",
            "dmljZVR5cGUYAiABKAkiKgoQU2VydmljZUZpbmRSZXBseRIWCg5zZXJ2aWNl",
            "QWRkcmVzcxgBIAEoCSItChhBcHBsaWNhdGlvbkNvbmZpZ1JlcXVlc3QSEQoJ",
            "Y29uZmlnS2V5GAEgASgJIi0KFkFwcGxpY2F0aW9uQ29uZmlnUmVwbHkSEwoL",
            "Y29uZmlnVmFsdWUYASABKAkyhgQKDENvbmZpZ0RjVXRpbBJ6ChRHZXRHcnBj",
            "U2VydmljZUNvbmZpZxIwLkVDUC5VdGlsLkNvbmZpZ0RjLlByb3RvUHJveHku",
            "U2VydmljZUZpbmRSZXF1ZXN0Gi4uRUNQLlV0aWwuQ29uZmlnRGMuUHJvdG9Q",
            "cm94eS5TZXJ2aWNlRmluZFJlcGx5IgASdQoVR2V0RGJDb25uZWN0aW9uQ29u",
            "ZmlnEi0uRUNQLlV0aWwuQ29uZmlnRGMuUHJvdG9Qcm94eS5EYkNvbmZpZ1Jl",
            "cXVlc3QaKy5FQ1AuVXRpbC5Db25maWdEYy5Qcm90b1Byb3h5LkRiQ29uZmln",
            "UmVwbHkiABKGAQoUR2V0QXBwbGljYXRpb25Db25maWcSNi5FQ1AuVXRpbC5D",
            "b25maWdEYy5Qcm90b1Byb3h5LkFwcGxpY2F0aW9uQ29uZmlnUmVxdWVzdBo0",
            "LkVDUC5VdGlsLkNvbmZpZ0RjLlByb3RvUHJveHkuQXBwbGljYXRpb25Db25m",
            "aWdSZXBseSIAEnoKEEdldFNlcnZlckFkZHJlc3MSMi5FQ1AuVXRpbC5Db25m",
            "aWdEYy5Qcm90b1Byb3h5LlNlcnZlckFkZHJlc3NSZXF1ZXN0GjAuRUNQLlV0",
            "aWwuQ29uZmlnRGMuUHJvdG9Qcm94eS5TZXJ2ZXJBZGRyZXNzUmVwbHkiAGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.ServerAddressRequest), global::ECP.Util.ConfigDc.ProtoProxy.ServerAddressRequest.Parser, new[]{ "ServerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.ServerAddressReply), global::ECP.Util.ConfigDc.ProtoProxy.ServerAddressReply.Parser, new[]{ "ServerAddress", "ServerIp", "ServerPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.DbConfigRequest), global::ECP.Util.ConfigDc.ProtoProxy.DbConfigRequest.Parser, new[]{ "KeyName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.DbConfigReply), global::ECP.Util.ConfigDc.ProtoProxy.DbConfigReply.Parser, new[]{ "DbConfigVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.ServiceFindRequest), global::ECP.Util.ConfigDc.ProtoProxy.ServiceFindRequest.Parser, new[]{ "ServiceName", "ServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.ServiceFindReply), global::ECP.Util.ConfigDc.ProtoProxy.ServiceFindReply.Parser, new[]{ "ServiceAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.ApplicationConfigRequest), global::ECP.Util.ConfigDc.ProtoProxy.ApplicationConfigRequest.Parser, new[]{ "ConfigKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ECP.Util.ConfigDc.ProtoProxy.ApplicationConfigReply), global::ECP.Util.ConfigDc.ProtoProxy.ApplicationConfigReply.Parser, new[]{ "ConfigValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServerAddressRequest : pb::IMessage<ServerAddressRequest> {
    private static readonly pb::MessageParser<ServerAddressRequest> _parser = new pb::MessageParser<ServerAddressRequest>(() => new ServerAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAddressRequest(ServerAddressRequest other) : this() {
      serverName_ = other.serverName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAddressRequest Clone() {
      return new ServerAddressRequest(this);
    }

    /// <summary>Field number for the "serverName" field.</summary>
    public const int ServerNameFieldNumber = 1;
    private string serverName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerName != other.ServerName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerAddressReply : pb::IMessage<ServerAddressReply> {
    private static readonly pb::MessageParser<ServerAddressReply> _parser = new pb::MessageParser<ServerAddressReply>(() => new ServerAddressReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerAddressReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAddressReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAddressReply(ServerAddressReply other) : this() {
      serverAddress_ = other.serverAddress_;
      serverIp_ = other.serverIp_;
      serverPort_ = other.serverPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAddressReply Clone() {
      return new ServerAddressReply(this);
    }

    /// <summary>Field number for the "serverAddress" field.</summary>
    public const int ServerAddressFieldNumber = 1;
    private string serverAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerAddress {
      get { return serverAddress_; }
      set {
        serverAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverIp" field.</summary>
    public const int ServerIpFieldNumber = 2;
    private string serverIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIp {
      get { return serverIp_; }
      set {
        serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverPort" field.</summary>
    public const int ServerPortFieldNumber = 3;
    private int serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerAddressReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerAddressReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerAddress != other.ServerAddress) return false;
      if (ServerIp != other.ServerIp) return false;
      if (ServerPort != other.ServerPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerAddress.Length != 0) hash ^= ServerAddress.GetHashCode();
      if (ServerIp.Length != 0) hash ^= ServerIp.GetHashCode();
      if (ServerPort != 0) hash ^= ServerPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerAddress);
      }
      if (ServerIp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerIp);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerAddress);
      }
      if (ServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIp);
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerAddressReply other) {
      if (other == null) {
        return;
      }
      if (other.ServerAddress.Length != 0) {
        ServerAddress = other.ServerAddress;
      }
      if (other.ServerIp.Length != 0) {
        ServerIp = other.ServerIp;
      }
      if (other.ServerPort != 0) {
        ServerPort = other.ServerPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServerAddress = input.ReadString();
            break;
          }
          case 18: {
            ServerIp = input.ReadString();
            break;
          }
          case 24: {
            ServerPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DbConfigRequest : pb::IMessage<DbConfigRequest> {
    private static readonly pb::MessageParser<DbConfigRequest> _parser = new pb::MessageParser<DbConfigRequest>(() => new DbConfigRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DbConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbConfigRequest(DbConfigRequest other) : this() {
      keyName_ = other.keyName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbConfigRequest Clone() {
      return new DbConfigRequest(this);
    }

    /// <summary>Field number for the "keyName" field.</summary>
    public const int KeyNameFieldNumber = 1;
    private string keyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyName {
      get { return keyName_; }
      set {
        keyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DbConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DbConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyName != other.KeyName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyName.Length != 0) hash ^= KeyName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DbConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyName.Length != 0) {
        KeyName = other.KeyName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            KeyName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DbConfigReply : pb::IMessage<DbConfigReply> {
    private static readonly pb::MessageParser<DbConfigReply> _parser = new pb::MessageParser<DbConfigReply>(() => new DbConfigReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DbConfigReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbConfigReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbConfigReply(DbConfigReply other) : this() {
      dbConfigVal_ = other.dbConfigVal_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbConfigReply Clone() {
      return new DbConfigReply(this);
    }

    /// <summary>Field number for the "dbConfigVal" field.</summary>
    public const int DbConfigValFieldNumber = 1;
    private string dbConfigVal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DbConfigVal {
      get { return dbConfigVal_; }
      set {
        dbConfigVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DbConfigReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DbConfigReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbConfigVal != other.DbConfigVal) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DbConfigVal.Length != 0) hash ^= DbConfigVal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DbConfigVal.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DbConfigVal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DbConfigVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbConfigVal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DbConfigReply other) {
      if (other == null) {
        return;
      }
      if (other.DbConfigVal.Length != 0) {
        DbConfigVal = other.DbConfigVal;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DbConfigVal = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServiceFindRequest : pb::IMessage<ServiceFindRequest> {
    private static readonly pb::MessageParser<ServiceFindRequest> _parser = new pb::MessageParser<ServiceFindRequest>(() => new ServiceFindRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceFindRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFindRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFindRequest(ServiceFindRequest other) : this() {
      serviceName_ = other.serviceName_;
      serviceType_ = other.serviceType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFindRequest Clone() {
      return new ServiceFindRequest(this);
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 2;
    private string serviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceFindRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceFindRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (ServiceType != other.ServiceType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (ServiceType.Length != 0) hash ^= ServiceType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (ServiceType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceFindRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.ServiceType.Length != 0) {
        ServiceType = other.ServiceType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            ServiceType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServiceFindReply : pb::IMessage<ServiceFindReply> {
    private static readonly pb::MessageParser<ServiceFindReply> _parser = new pb::MessageParser<ServiceFindReply>(() => new ServiceFindReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceFindReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFindReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFindReply(ServiceFindReply other) : this() {
      serviceAddress_ = other.serviceAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFindReply Clone() {
      return new ServiceFindReply(this);
    }

    /// <summary>Field number for the "serviceAddress" field.</summary>
    public const int ServiceAddressFieldNumber = 1;
    private string serviceAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAddress {
      get { return serviceAddress_; }
      set {
        serviceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceFindReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceFindReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceAddress != other.ServiceAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceAddress.Length != 0) hash ^= ServiceAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceFindReply other) {
      if (other == null) {
        return;
      }
      if (other.ServiceAddress.Length != 0) {
        ServiceAddress = other.ServiceAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplicationConfigRequest : pb::IMessage<ApplicationConfigRequest> {
    private static readonly pb::MessageParser<ApplicationConfigRequest> _parser = new pb::MessageParser<ApplicationConfigRequest>(() => new ApplicationConfigRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConfigRequest(ApplicationConfigRequest other) : this() {
      configKey_ = other.configKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConfigRequest Clone() {
      return new ApplicationConfigRequest(this);
    }

    /// <summary>Field number for the "configKey" field.</summary>
    public const int ConfigKeyFieldNumber = 1;
    private string configKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigKey {
      get { return configKey_; }
      set {
        configKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigKey != other.ConfigKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigKey.Length != 0) hash ^= ConfigKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConfigKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConfigKey.Length != 0) {
        ConfigKey = other.ConfigKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConfigKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplicationConfigReply : pb::IMessage<ApplicationConfigReply> {
    private static readonly pb::MessageParser<ApplicationConfigReply> _parser = new pb::MessageParser<ApplicationConfigReply>(() => new ApplicationConfigReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationConfigReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ECP.Util.ConfigDc.ProtoProxy.ConfigDcUtilReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConfigReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConfigReply(ApplicationConfigReply other) : this() {
      configValue_ = other.configValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConfigReply Clone() {
      return new ApplicationConfigReply(this);
    }

    /// <summary>Field number for the "configValue" field.</summary>
    public const int ConfigValueFieldNumber = 1;
    private string configValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigValue {
      get { return configValue_; }
      set {
        configValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationConfigReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationConfigReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigValue != other.ConfigValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigValue.Length != 0) hash ^= ConfigValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigValue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConfigValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationConfigReply other) {
      if (other == null) {
        return;
      }
      if (other.ConfigValue.Length != 0) {
        ConfigValue = other.ConfigValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConfigValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
